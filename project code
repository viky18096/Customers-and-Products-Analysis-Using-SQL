/*
 The aim of project to extract key performance indicators (KPIs)  using data analysis to make smarter decisions.

 The goal of this project is to analyze data from a sales records database for scale model cars and extract information for decision-making.

 . Below are the questions we want to answer for this project. On the next screen, we'll learn about the database and the tools to manipulate it.

Question 1: Which products should we order more of or less of?
Question 2: How should we tailor marketing and communication strategies to customer behaviors?
Question 3: How much can we spend on acquiring new customers?

Scale Model Cars Database

The tables are as follows:

1. productslines table - this table contains product category data containing 4 columns. The product line is the primary key. This table
has a relationship with the producttable on the product line column which is a one-to-many relationship.

2. products table - this table contains product data. This table has 9 columns. The productCode is the primary key and productLine the 
foreign key. This table has a relationship with the productlines table on the productLine column which is a many-to-one relationship
and the orderdetails table on the productCode column which is a one-to-one relationship.

3. orderdetails table - this table contains order details data. This table has 5 columns. The orderNumber & productCode are the composite 
key. This table has a relationship with the products table productCode colum which is a one-to-one relationship and the order table on the
orderNumber column which is a one-to-one relationship.

4. orders table - this table contains orders recieved data. This table has 7 columns.The orderNumber is the primary key.
and the customerNumber is the foreign key. This table has a relationship with the orderdetails table on the orderNumber table which is
a one-to-one relationship and the customer table on the customerNumber column which is a many-to-one relationship.

5. customers table - this table contains customer data. This table has 13 columns. The customerNumber is the primary key and 
salesRepEmployeeNumber is the foreign key. This table has a relationship with the orders table on the customerNumber column which is a
one-to-many relationship, the payments table on the customerNumber column which is a one-to-one relationship and the employees table
on the employeeNumber column which is a many-to-one relationship.

6. payments table - this table contains payment data. This table has 4 columns. The customerNumber & checkNumber are both the 
composite key. This table has a relationship with the customers table on the customerNumber column which is a one-to-one relationship.

7. employees table - this table contains employee data. This table has 8 columns. The employeeNumber is the primary key and officeCode
is the foreign key. This table has a self-referencing relationship between the employeeNumber and reportsTo columns which is a
one-to-many relationship, a relationship with the customers table on the salesRepEmployeeNumber column which is a one-to- many relationship
and the offices table on teh officeCode column which is a many-to-one relationship.

8. offices table - this table contains office data. This table has 9 columns. The officeCode is the primary Key. This table has a 
relationship with the employees table on the officeCode table which is a one-to-many relationship.


-- SQL queries I will be executing to analyse the tables:

*/


SELECT "Customers" AS table_name,
	   13 AS number_of_attributes,
	   COUNT(*) AS number_of_rows
  FROM customers
  
 UNION 
  
SELECT "Products" AS table_name,
	   9 AS number_of_attributes,
	   COUNT(*) AS number_of_rows
  FROM products
  
 UNION
 
SELECT "ProductLines" AS table_name,
	   4 AS number_of_attributes,
	   COUNT(*) AS number_of_rows
  FROM productLines
  
 UNION
 
SELECT "Orders" AS table_name,
	    7 AS number_of_attributes,
		COUNT(*) AS number_of_rows
  FROM orders
  
 UNION

SELECT "OrderDetails" AS table_name,
       5 AS number_of_attributes,
	   COUNT(*) AS number_of_rows
  FROM orderdetails
  
 UNION
 
SELECT "Payments" AS table_name,
	   4 AS number_of_attributes,
	   COUNT(*) AS number_of_rows
  FROM payments
 
 UNION
 
SELECT "Employees" AS table_name,
	   8 AS number_of_attributes,
	   COUNT(*) AS number_of_rows
  FROM employees
  
 UNION
 
SELECT "Offices" AS table_name,
       9 AS number_of_attributes,
	   COUNT(*) AS number_of_rows
  FROM offices;

/* The code above queries each table's name, the number of attributes in each tbale, and the number of rows in each table 

-- Write a query to compute the low stock for each product using a correlated subquery.

SELECT productCode,ROUND(SUM(quantityOrdered) * 1.0 / (SELECT quantityInStock
														FROM products p
														WHERE o.productCode = p.productCode), 2) AS low_stock
FROM orderdetails AS o
GROUP BY productCode
ORDER BY low_stock
LIMIT 10;

/* Second, We write a query to compute the product performance for each product: 
*/

SELECT productCode,
       SUM(quantityOrdered * priceEach) as product_performance
	FROM orderdetails
GROUP BY productCode
ORDER BY product_performance desc
LIMIT 10;

/* Lastly, We combine the previous queries using a Common Table Expression (CTE)
to display priority products for restocking using the IN operator:
*/ 
 
WITH low_stock AS(
SELECT productCode,ROUND(SUM(quantityOrdered) * 1.0 / (SELECT quantityInStock
														FROM products p
														WHERE o.productCode = p.productCode), 2) AS low_stock
FROM orderdetails AS o
GROUP BY productCode
ORDER BY low_stock
LIMIT 10)

SELECT 	p.productName,p.productLine,o.productCode, SUM(o.quantityOrdered  * o.priceEach) AS Product_Performance
FROM orderdetails o
JOIN products AS p
ON p.productCode = o.productCode
WHERE o.productCode IN (SELECT productCode
						FROM low_stock)
GROUP BY o.productCode
ORDER BY Product_Performance DESC;

/* Question 2: How Should We Match Marketing and Communication Strategies to Customer Behavior?

SELECT o.customerNumber, SUM(quantityOrdered * (priceEach - buyPrice)) AS profit
  FROM products p
  JOIN orderdetails od
    ON p.productCode = od.productCode
  JOIN orders o
    ON o.orderNumber = od.orderNumber
 GROUP BY o.customerNumber
 ORDER BY profit DESC;

/* Now we write a query to find the top five VIP customers and their country */

 WITH customer_orders AS(
 SELECT o.customerNumber, SUM(quantityOrdered * (priceEach - buyPrice)) AS profit
  FROM products p
  JOIN orderdetails od
    ON p.productCode = od.productCode
  JOIN orders o
    ON o.orderNumber = od.orderNumber
 GROUP BY o.customerNumber
 ORDER BY profit DESC
 LIMIT 5)
 
 SELECT customerName, customerNumber,contactFirstName,contactLastName, country
 FROM customers
 WHERE customerNumber IN(
						SELECT customerNumber
						FROM customer_orders);
						
/* Similar to the previous query, we write a query to find the top five least-engaged customers. */					

WITH leastcustomers AS(

SELECT o.customerNumber as customerNumber ,SUM(od.quantityOrdered * (od.priceEach - p.buyPrice)) AS profit
FROM products as p
JOIN orderdetails as od
ON p.productCode = od.productCode
JOIN orders as o
ON o.orderNumber = od.orderNumber
GROUP BY customerNumber
ORDER BY profit ASC
LIMIT 5)

SELECT c.customerName,c.contactFirstName,c.contactLastName,c.country,l.profit as new_profit
FROM customers AS c
JOIN leastcustomers  AS l
ON  l.customerNumber = c.customerNumber
WHERE c.customerNumber IN(SELECT customerNumber
						FROM leastcustomers)
GROUP BY c.contactFirstName
ORDER BY new_profit			;

/* Question 3: How Much Can We Spend on Acquiring New Customers?

To determine how much money we can spend acquiring new customers, we can compute the Customer Lifetime Value (LTV), 
which represents the average amount of money a customer generates. We can then determine how much we can spend on marketing. */


WITH money_in_by_customer AS (
SELECT o.customerNumber, SUM(quantityOrdered * (priceEach - buyPrice)) AS revenue
  FROM products p
  JOIN orderdetails od
    ON p.productCode = od.productCode
  JOIN orders o
    ON o.orderNumber = od.orderNumber
 GROUP BY o.customerNumber
)

SELECT AVG(mc.revenue) AS ltv
  FROM money_in_by_customer mc;
  
 
	
  
